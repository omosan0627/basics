(* 場合分けを簡単にしたい。Some vs Noneとかtrue vs falseとか*)
(* 演算子を導入して読みやすくしたい。*)
(* assertを使っている部分をなくしたい。*)
(* 補題を新たに示さないといけないと分かったときに戻らないといけないのをやめたい。*)
(* 使えそうな補題を検索する方法を知りたい *)
(* Hint Constructors? *)
(* refine? *)
(* replace? *)
(* rewrite _ , _: 複数一気に書き換え *)
(* lia *)
(* elim: inductionの方法らしいが…何か古いみたいで推奨されていないと書いてあった*)
(* destruct _ as [|]: rememberと使うと強力。[]内で変数名も決められる。*)
(* pose proof?*)
(* -? + ?*)
(* remember?:変数を追加できる*)
(* discriminate?: *)
(* symmetry: 両辺入れ替え*)
(* constructor?*)
(* search 検索*)
(* intros ? ? :?の数だけintrosするってこと*)
(* Ltac coqの証明のタクティクスをまとめて適用してくれるもの*)
(* 高階述語論理? 1階との差?*)
(* 41Semicolonさんのテクニックをとりあえず盗もう。*)
Definition true_or_false b: {b = true} + {b = false}.
destruct b. left. reflexivity. right. reflexivity. Qed.

